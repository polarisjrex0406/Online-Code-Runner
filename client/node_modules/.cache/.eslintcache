[{"/Users/jigyansu_nanda/Desktop/online-compiler/client/src/index.js":"1","/Users/jigyansu_nanda/Desktop/online-compiler/client/src/App.js":"2","/Users/jigyansu_nanda/Desktop/online-compiler/client/src/defaultStubs.js":"3","/Users/jigyansu_nanda/Desktop/Online-Code-Runner/client/src/index.js":"4","/Users/jigyansu_nanda/Desktop/Online-Code-Runner/client/src/App.js":"5","/Users/jigyansu_nanda/Desktop/Online-Code-Runner/client/src/defaultStubs.js":"6"},{"size":178,"mtime":1673237618795,"results":"7","hashOfConfig":"8"},{"size":8686,"mtime":1673580808845,"results":"9","hashOfConfig":"8"},{"size":296,"mtime":1673581001110,"results":"10","hashOfConfig":"8"},{"size":178,"mtime":1673585283649,"results":"11","hashOfConfig":"12"},{"size":8692,"mtime":1673585866435,"results":"13","hashOfConfig":"12"},{"size":296,"mtime":1673585283649,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10v9d5g",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1csgnf9",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jigyansu_nanda/Desktop/online-compiler/client/src/index.js",[],[],"/Users/jigyansu_nanda/Desktop/online-compiler/client/src/App.js",["34","35","36"],[],"/Users/jigyansu_nanda/Desktop/online-compiler/client/src/defaultStubs.js",[],[],"/Users/jigyansu_nanda/Desktop/Online-Code-Runner/client/src/index.js",[],[],"/Users/jigyansu_nanda/Desktop/Online-Code-Runner/client/src/App.js",["37","38","39"],[],"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Editor from \"@monaco-editor/react\";\nimport stubs from \"./defaultStubs\";\nimport \"./App.css\";\n\nconst editorOptions = {\n    scrollBeyondLastLine: false,\n    fontSize: \"14px\",\n    folding: false,\n    // lineDecorationsWidth: 15,\n};\n\nconst inputOptions = {\n    minimap: { enabled: false },\n    automaticLayout: true,\n    scrollBeyondLastLine: false,\n    fontSize: \"14px\",\n    lineDecorationsWidth: 5,\n};\nconst outputOptions = {\n    minimap: { enabled: false },\n    automaticLayout: true,\n    scrollBeyondLastLine: false,\n    fontSize: \"14px\",\n    lineDecorationsWidth: 5,\n};\n\nfunction App() {\n    const [language, setLanguage] = useState(\"python\");\n    const [code, setCode] = useState(\"\");\n    const [input, setInput] = useState(\"// enter input here\");\n    const [output, setOutput] = useState(\"\");\n    const [status, setStatus] = useState(\"\");\n    const [jobId, setJobId] = useState(\"\");\n    const [jobDetails, setJobDetails] = useState(null);\n    const [editorMode, setEditorMode] = useState(\"vs-dark\");\n    const [languageIcon, setLanguageIcon] = useState(\"./resources/python.png\");\n\n    useEffect(() => {\n        setCode(stubs[language]);\n        setOutput(\"// output\");\n        setLanguageIcon(`./resources/${language}.png`);\n    }, [language]);\n\n    const toggleTheme = (idName) => {\n        let currentClassName = document.getElementById(idName).className;\n        let newClassName = currentClassName;\n        if (currentClassName === idName + \"-dark\")\n            newClassName = idName + \"-light\";\n        else newClassName = idName + \"-dark\";\n        document.getElementById(idName).className = newClassName;\n    };\n\n    const handleThemeChange = () => {\n        if (editorMode === \"vs-light\") setEditorMode(\"vs-dark\");\n        else setEditorMode(\"vs-light\");\n        toggleTheme(\"App\");\n        toggleTheme(\"header\");\n        toggleTheme(\"app-name\");\n        toggleTheme(\"language-button\");\n        const themeToggler = document.getElementById(\"theme-icon\");\n        let classNames = themeToggler.classList;\n        if (classNames.contains(\"theme-icon-light\")) {\n            classNames.replace(\"theme-icon-light\", \"theme-icon-dark\");\n            classNames.replace(\"fa-sun\", \"fa-moon\");\n        } else {\n            classNames.replace(\"theme-icon-dark\", \"theme-icon-light\");\n            classNames.replace(\"fa-moon\", \"fa-sun\");\n        }\n    };\n\n    const handleSubmit = async () => {\n        const payload = {\n            language: language,\n            code: code,\n            input: input,\n        };\n        try {\n            setJobId(\"\");\n            setStatus(\"Running\");\n            setJobDetails(null);\n            setOutput(`Code Execution Status: Running`);\n            const { data } = await axios.post(\n                \"http://localhost:5000/run\",\n                payload\n            );\n            // console.log(data);\n            setJobId(data.jobId);\n\n            let intervalId;\n\n            intervalId = setInterval(async () => {\n                setStatus(\"Running\");\n                setOutput(`Code Execution Status: Running`);\n                const { data: dataRes } = await axios.get(\n                    \"http://localhost:5000/status\",\n                    { params: { id: data.jobId } }\n                );\n                const { success, job, error } = dataRes;\n                if (success) {\n                    // console.log(dataRes);\n                    setJobDetails(job);\n                    // console.log(jobDetails);\n                    const { status: jobStatus, output: jobOutput } = job;\n                    setStatus(jobStatus);\n                    if (jobStatus === \"Running\") {\n                        setOutput(`Code Execution Status: Running`);\n                        return;\n                    } else if (jobStatus === \"Success\") {\n                        setOutput(\n                            `Code Execution Status: ${jobStatus}\\n\\n${jobOutput}`\n                        );\n                    } else {\n                        const errorObject = JSON.parse(jobOutput);\n                        // console.log(errorObject);\n                        setOutput(\n                            `Code Execution Status: ${jobStatus}\\n\\n${errorObject.stderr}`\n                        );\n                    }\n                    clearInterval(intervalId);\n                } else {\n                    console.log(dataRes);\n                    setStatus(\"Error !!! \");\n                    console.error(error);\n                    setOutput(error);\n                    clearInterval(intervalId);\n                }\n            }, 1000);\n        } catch ({ response }) {\n            if (response) {\n                const errorMessage = response.data.err.stderr;\n                setOutput(errorMessage);\n            } else {\n                setOutput(\"Error connecting to server!\");\n            }\n        }\n    };\n\n    return (\n        <div id=\"App\" className=\"App-dark\">\n            <div id=\"header\" className=\"header-dark\">\n                <h3 id=\"app-name\" className=\"app-name-dark\">\n                    <i className=\"fas fa-solid fa-cube\" aria-hidden=\"true\"></i>\n                    &nbsp; Online Code Runner\n                </h3>\n\n                <div className=\"nav-right-options\">\n                    <i\n                        id=\"theme-icon\"\n                        className=\"fas fa-solid fa-sun fa-2x nav-icons theme-icon-light\"\n                        aria-hidden=\"true\"\n                        onClick={handleThemeChange}\n                    ></i>\n\n                    <i\n                        className=\"fas fa-solid fa-swatchbook tutorial-icon nav-icons fa-2x\"\n                        aria-hidden=\"true\"\n                    ></i>\n                </div>\n            </div>\n\n            <div className=\"secondary-nav-items\">\n                <button className=\"btn logo-btn\" disabled={true}>\n                    <img\n                        src={require(`${languageIcon}`)}\n                        className=\"image\"\n                        alt={`${language} icon`}\n                    />\n                </button>\n                <button id=\"language-button\" className=\"language-button-dark\">\n                    <select\n                        value={language}\n                        onChange={(e) => {\n                            setStatus(\"\");\n                            setJobDetails(null);\n                            setLanguage(e.target.value);\n                            setCode(stubs[e.target.value]);\n                            setLanguageIcon(`./resources/${language}.png`);\n                        }}\n                    >\n                        <option value={\"python\"}>Python</option>\n                        <option value={\"cpp\"}>C++</option>\n                    </select>\n                </button>\n                {/* run button */}\n                <button className=\"btn run-btn\" onClick={handleSubmit}>\n                    <i\n                        className=\"fas fa-play fa-fade run-icon\"\n                        aria-hidden=\"true\"\n                    ></i>\n                    &nbsp; Run\n                </button>\n            </div>\n\n            <div className=\"editor\">\n                <Editor\n                    height=\"100%\"\n                    width=\"100%\"\n                    theme={editorMode}\n                    defaultLanguage={language}\n                    defaultValue={code}\n                    value={code}\n                    onChange={(e) => setCode(e)}\n                    options={editorOptions}\n                    language={language}\n                />\n            </div>\n            <div className=\"std-input-output\">\n                <div className=\"std-input\">\n                    <Editor\n                        height=\"100%\"\n                        width=\"100%\"\n                        theme={editorMode}\n                        defaultLanguage=\"plaintext\"\n                        defaultValue={\"// enter input here\"}\n                        value={input}\n                        options={inputOptions}\n                        onChange={(e) => setInput(e)}\n                    />\n                </div>\n                <div className=\"std-output\">\n                    <Editor\n                        height=\"100%\"\n                        width=\"100%\"\n                        theme={editorMode}\n                        defaultLanguage=\"plaintext\"\n                        defaultValue={\"// output\"}\n                        value={output}\n                        options={outputOptions}\n                    />\n                </div>\n            </div>\n            <br />\n        </div>\n    );\n}\n\nexport default App;\n","/Users/jigyansu_nanda/Desktop/Online-Code-Runner/client/src/defaultStubs.js",[],[],{"ruleId":"40","severity":1,"message":"41","line":34,"column":12,"nodeType":"42","messageId":"43","endLine":34,"endColumn":18},{"ruleId":"40","severity":1,"message":"44","line":35,"column":12,"nodeType":"42","messageId":"43","endLine":35,"endColumn":17},{"ruleId":"40","severity":1,"message":"45","line":36,"column":12,"nodeType":"42","messageId":"43","endLine":36,"endColumn":22},{"ruleId":"40","severity":1,"message":"41","line":34,"column":12,"nodeType":"42","messageId":"43","endLine":34,"endColumn":18},{"ruleId":"40","severity":1,"message":"44","line":35,"column":12,"nodeType":"42","messageId":"43","endLine":35,"endColumn":17},{"ruleId":"40","severity":1,"message":"45","line":36,"column":12,"nodeType":"42","messageId":"43","endLine":36,"endColumn":22},"no-unused-vars","'status' is assigned a value but never used.","Identifier","unusedVar","'jobId' is assigned a value but never used.","'jobDetails' is assigned a value but never used."]