{"ast":null,"code":"var _jsxFileName = \"/Users/jigyansu_nanda/Downloads/online-compiler/client/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Editor from \"@monaco-editor/react\";\nimport stubs from \"./defaultStubs\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [language, setLanguage] = useState(\"cpp\");\n  const [code, setCode] = useState(\"\");\n  const [output, setOutput] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [jobId, setJobId] = useState(\"\");\n  const [editorMode, setEditorMode] = useState(\"vs-dark\");\n  useEffect(() => {\n    setCode(stubs[language]);\n  }, [language]);\n  const handleEditorMode = () => {\n    if (editorMode === \"vs-light\") setEditorMode(\"vs-dark\");else setEditorMode(\"vs-light\");\n  };\n  const handleSubmit = async () => {\n    const payload = {\n      language: language,\n      code: code\n    };\n    try {\n      setJobId(\"\");\n      setStatus(\"\");\n      setOutput(\"\");\n      const {\n        data\n      } = await axios.post(\"http://localhost:5000/run\", payload);\n      console.log(data);\n      setJobId(data.jobId);\n      let intervalId;\n      intervalId = setInterval(async () => {\n        const {\n          data: dataRes\n        } = await axios.get(\"http://localhost:5000/status\", {\n          params: {\n            id: data.jobId\n          }\n        });\n        const {\n          success,\n          job,\n          error\n        } = dataRes;\n        console.log(dataRes);\n        if (success) {\n          const {\n            status: jobStatus,\n            output: jobOutput\n          } = job;\n          setStatus(jobStatus);\n          if (jobStatus === \"Running\") return;\n          setOutput(jobOutput);\n          clearInterval(intervalId);\n        } else {\n          setStatus(\"Error !!! \");\n          console.error(error);\n          setOutput(error);\n          clearInterval(intervalId);\n        }\n      }, 1000);\n    } catch ({\n      response\n    }) {\n      if (response) {\n        const errorMessage = response.data.err.stderr;\n        setOutput(errorMessage);\n      } else {\n        setOutput(\"Error connecting to server!\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-header\",\n      children: \"Online Code Compiler\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Language: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: language,\n        onChange: e => {\n          setLanguage(e.target.value);\n          setCode(stubs[e.target.value]);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"cpp\",\n          children: \"C++\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"python\",\n          children: \"Python\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEditorMode,\n        children: \"change editor theme\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        height: \"100%\",\n        width: \"100%\",\n        theme: editorMode,\n        defaultLanguage: language,\n        defaultValue: code,\n        value: code,\n        onChange: e => setCode(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"std-input-output\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"std-input\",\n        children: /*#__PURE__*/_jsxDEV(Editor, {\n          height: \"100%\",\n          width: \"100%\",\n          theme: editorMode,\n          defaultLanguage: \"plaintext\",\n          defaultValue: \"// enter input here\",\n          value: \"// enter input here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"std-output\",\n        children: /*#__PURE__*/_jsxDEV(Editor, {\n          height: \"100%\",\n          width: \"100%\",\n          theme: editorMode,\n          defaultLanguage: \"plaintext\",\n          defaultValue: \"// output\",\n          value: output\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"a2i9ZC2OX34KrWrPb8K1EzlFOsQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","axios","Editor","stubs","App","language","setLanguage","code","setCode","output","setOutput","status","setStatus","jobId","setJobId","editorMode","setEditorMode","handleEditorMode","handleSubmit","payload","data","post","console","log","intervalId","setInterval","dataRes","get","params","id","success","job","error","jobStatus","jobOutput","clearInterval","response","errorMessage","err","stderr","e","target","value"],"sources":["/Users/jigyansu_nanda/Downloads/online-compiler/client/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Editor from \"@monaco-editor/react\";\nimport stubs from \"./defaultStubs\";\nimport \"./App.css\";\n\nfunction App() {\n    const [language, setLanguage] = useState(\"cpp\");\n    const [code, setCode] = useState(\"\");\n    const [output, setOutput] = useState(\"\");\n    const [status, setStatus] = useState(\"\");\n    const [jobId, setJobId] = useState(\"\");\n    const [editorMode, setEditorMode] = useState(\"vs-dark\");\n\n    useEffect(() => {\n        setCode(stubs[language]);\n    }, [language]);\n\n    const handleEditorMode = () => {\n        if (editorMode === \"vs-light\") setEditorMode(\"vs-dark\");\n        else setEditorMode(\"vs-light\");\n    };\n\n    const handleSubmit = async () => {\n        const payload = {\n            language: language,\n            code: code,\n        };\n        try {\n            setJobId(\"\");\n            setStatus(\"\");\n            setOutput(\"\");\n            const { data } = await axios.post(\n                \"http://localhost:5000/run\",\n                payload\n            );\n            console.log(data);\n            setJobId(data.jobId);\n\n            let intervalId;\n\n            intervalId = setInterval(async () => {\n                const { data: dataRes } = await axios.get(\n                    \"http://localhost:5000/status\",\n                    { params: { id: data.jobId } }\n                );\n                const { success, job, error } = dataRes;\n                console.log(dataRes);\n                if (success) {\n                    const { status: jobStatus, output: jobOutput } = job;\n                    setStatus(jobStatus);\n                    if (jobStatus === \"Running\") return;\n                    setOutput(jobOutput);\n                    clearInterval(intervalId);\n                } else {\n                    setStatus(\"Error !!! \");\n                    console.error(error);\n                    setOutput(error);\n                    clearInterval(intervalId);\n                }\n            }, 1000);\n        } catch ({ response }) {\n            if (response) {\n                const errorMessage = response.data.err.stderr;\n                setOutput(errorMessage);\n            } else {\n                setOutput(\"Error connecting to server!\");\n            }\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <h1 className=\"app-header\">Online Code Compiler</h1>\n\n            {/* Navigation bar */}\n            <div className=\"navbar\">\n                <label>Language: </label>\n                <select\n                    value={language}\n                    onChange={(e) => {\n                        setLanguage(e.target.value);\n                        setCode(stubs[e.target.value]);\n                    }}\n                >\n                    <option value={\"cpp\"}>C++</option>\n                    <option value={\"python\"}>Python</option>\n                </select>\n                <button onClick={handleSubmit}>submit</button>\n                <button onClick={handleEditorMode}>change editor theme</button>\n            </div>\n            <div className=\"editor\">\n                {/* <p className=\"editor-card-header\">Editor</p> */}\n                <Editor\n                    height=\"100%\"\n                    width=\"100%\"\n                    theme={editorMode}\n                    defaultLanguage={language}\n                    defaultValue={code}\n                    value={code}\n                    onChange={(e) => setCode(e)}\n                />\n            </div>\n            <div className=\"std-input-output\">\n                <div className=\"std-input\">\n                    {/* <p className=\"editor-card-header\">Input</p> */}\n                    <Editor\n                        height=\"100%\"\n                        width=\"100%\"\n                        theme={editorMode}\n                        defaultLanguage=\"plaintext\"\n                        defaultValue={\"// enter input here\"}\n                        value={\"// enter input here\"}\n                    />\n                </div>\n                <div className=\"std-output\">\n                    {/* <p className=\"editor-card-header\">Output</p> */}\n                    <Editor\n                        height=\"100%\"\n                        width=\"100%\"\n                        theme={editorMode}\n                        defaultLanguage=\"plaintext\"\n                        defaultValue={\"// output\"}\n                        value={output}\n                    />\n                </div>\n            </div>\n            {/* <div className=\"std-input\">\n                <p className=\"editor-card-header\">input</p>\n                <Editor\n                    height=\"100%\"\n                    width=\"100%\"\n                    theme={editorMode}\n                    defaultLanguage=\"plaintext\"\n                    defaultValue={\"// enter input here\"}\n                    value={\"enter input here\"}\n                />\n            </div> */}\n            <br />\n            {/* <button onClick={handleSubmit}>submit</button> */}\n            {/* <p>{status}</p> */}\n            {/* <p>{jobId && `JobID: ${jobId}`}</p> */}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}